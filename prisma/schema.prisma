generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                   String          @id @default(uuid())
  email                String          @unique
  fullName             String?
  userName             String          @unique
  role                 String
  status               String          @default("Active")
  contractor           Contractor[]
  potentialJobsCreated PotentialJobs[] @relation("createdBy")
  dubmittedJobs        SubmittedJobs[] @relation("submittedBy")
  ApprovedJobs         ApprovedJobs[]    @relation("approvedBy")
  AssignedJobs         ActiveJobs[]    @relation("assignedTo")
}

model Contractor {
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  id           Int      @id @default(autoincrement())
  contractorId String   @default(uuid())
  userId       String
  User         User     @relation(fields: [userId], references: [id])
}

model JobDetails {
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  id                Int             @id @default(autoincrement())
  vaultNumber       String
  owner             String
  city              String
  state             String
  vaultWidthFt      Decimal         @db.Decimal(10, 2)
  vaultHeightFt     Decimal         @db.Decimal(10, 2)
  vaultLengthFt     Decimal         @db.Decimal(10, 2)
  vaultWidthIn      Decimal         @db.Decimal(10, 2)
  vaultHeightIn     Decimal         @db.Decimal(10, 2)
  vaultLengthIn     Decimal         @db.Decimal(10, 2)
  wallSqFt          Decimal         @db.Decimal(10, 2)
  ceilingSqFt       Decimal         @db.Decimal(10, 2)
  totalSqFt         Decimal         @db.Decimal(10, 2)
  possibleStartDate DateTime        @default(now())
  activeJobs    ActiveJobs[]
  potentialJobs PotentialJobs[]
  submittedJobs SubmittedJobs[]
  approvedJobs  ApprovedJobs[]
}

model JobAdditionalFiles {
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  id             Int           @id @default(autoincrement())
  PotentialJobId Int
  fileName       String
  filetype       String
  fileExt        String
  file           Bytes
  PotentialJob   PotentialJobs @relation(fields: [PotentialJobId], references: [id])
}

model PotentialJobs {
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  id           Int                  @id @default(autoincrement())
  createdById  String
  contractorId String
  jobDetailsId Int
  files        JobAdditionalFiles[]
  createdBy    User                 @relation("createdBy", fields: [createdById], references: [id])
  jobDetails   JobDetails           @relation(fields: [jobDetailsId], references: [id])
}

model SubmittedJobs {
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  id            Int        @id @default(autoincrement())
  submittedById String
  contractorId  String
  status        String     @default("Pending")
  jobDetailsId  Int
  jobDetails    JobDetails @relation(fields: [jobDetailsId], references: [id])
  submittedBy   User       @relation("submittedBy", fields: [submittedById], references: [id])
}

model ApprovedJobs {
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  id              Int           @id @default(autoincrement())
  contractorId    String
  jobDetailsId    Int
  approvedBy      User          @relation("approvedBy", fields: [approvedById], references: [id], onUpdate: NoAction, onDelete: NoAction)
  approvedById    String
  jobDetails      JobDetails    @relation(fields: [jobDetailsId], references: [id])
}

model ActiveJobs {
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  id              Int           @id @default(autoincrement())
  contractorId    String
  jobDetailsId    Int
  mobileFactory   MobileFactory @relation(fields: [mobileFactoryId], references: [tpId])
  mobileFactoryId String
  jobDetails      JobDetails    @relation(fields: [jobDetailsId], references: [id])
  status          String        @default("Pending_Dispatch")
  assignedTo      User?          @relation("assignedTo", fields: [assignedToId], references: [id])
  assignedToId    String?
  startedAt       DateTime?
  completedAt     DateTime?
}

model MobileFactory {
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  id                     Int                      @id @default(autoincrement())
  tpId                   String                   @unique
  name                   String
  plateNumber            String
  warehouseId            Int
  activeJobs             ActiveJobs[]
  mixingLog              MixingLog[]
  warehouse              Warehouse                @relation(fields: [warehouseId], references: [id])
  mobileFactoryInventory MobileFactoryInventory[]
}

model MobileFactoryInventory {
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  id                   Int                   @id @default(autoincrement())
  sortIndex            Int                   @default(0)
  mobileFactoryId      Int
  inventoryItem        String
  quantity             Int                   @default(0)
  lookupInventoryItems Lookup_InventoryItems @relation(fields: [inventoryItem], references: [identifier])
  mobileFactory        MobileFactory         @relation(fields: [mobileFactoryId], references: [id])
}

model Warehouse {
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  id                 Int                  @id @default(autoincrement())
  name               String
  address            String
  city               String
  state              String
  zip                String
  mobileFactory      MobileFactory[]
  warehouseinventory WarehouseInventory[]
}

model WarehouseInventory {
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  id                   Int                   @id @default(autoincrement())
  warehouseId          Int
  inventoryItem        String
  quantity             Int                   @default(0)
  lookupInventoryItems Lookup_InventoryItems @relation(fields: [inventoryItem], references: [identifier])
  warehouse            Warehouse             @relation(fields: [warehouseId], references: [id])
}

model Lookup_InventoryItems {
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  identifier             String                   @unique
  name                   String                   
  index                  Int                      @default(autoincrement())
  isActive               Boolean                  @default(true)
  order                  Int                      @default(0)
  primaryUnit            String
  secondaryUnit          String?
  mobileFactoryInventory MobileFactoryInventory[]
  warehouseinventory     WarehouseInventory[]
}

model MixingLog {
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  id              Int           @id @default(autoincrement())
  mobileFactoryId String
  Material        String
  PartBDose       Int
  BWallLevel      Int
  BCeilingLevel   Int
  MixTime         Int
  LotNumber       String
  GPSLat          String
  GPSLong         String
  LOGTime         String
  LOGDate         String
  Box1Temp        Decimal
  Box2Temp        Decimal
  GENHours        Int
  mobileFactory   MobileFactory @relation(fields: [mobileFactoryId], references: [tpId])
}
